// Milkyway Hierarchical Verilog Dump:
// Generated on 06/30/2016 at 23:48:01
// Design Generated by Consolidated Verilog Reader
// File produced by Consolidated Verilog Writer
// Library Name :cnvi_gnss_core_lib
// Cell Name    :cnvi_gnss_core
// Hierarchy delimiter:'/'
// Write Command : write_verilog ./results/cnvi_gnss_core_layout.v -force_output_references "" -force_no_output_references  
//   "d04clgtap02ndz00 d04clgtap02wdz00 d81mtodic_isodic_sclg_cont d8xmtodic_nestdic_sclg_cont"  
//   -pg -wire_declaration -macro_definition -diode_ports -no_corner_pad_cells -no_pad_filler_cells  
//   -no_core_filler_cells -no_tap_cells
//

module cnvi_gnss_core_cnvi_gnss_core_edt_bypass_logic_1 (edt_bypass_out , 
    edt_bypass , vss , vdd_core_sw , edt_bypass_in , edt_scan_out , 
    edt_scan_in , edt_channels_out , edt_channels_in );
input  [6:0] edt_bypass_out ;
input  edt_bypass ;
input  vss ;
input  vdd_core_sw ;
input  [374:0] edt_bypass_in ;
input  [374:0] edt_scan_out ;
output [374:0] edt_scan_in ;
output [6:0] edt_channels_out ;
input  [6:0] edt_channels_in ;

/* wire declarations */
supply0 vss ;

wire n30 ;
wire n28 ;

cnvi_gnss_core_gnss_block_gated_clk_20 gnss_block_gated_clk_i0 () ;

d04clgani02wn0d0 \snps_pd_cnvi_gn_core__iso_edt_inputs_from_sw2_clamp_0_snps_edt_scan_out[115]__UPF_ISO (
    .o ( n[260] ) , .b ( n83 ) , .a ( edt_scan_out[115] ) , .vss ( vss ) 
    , .vcc ( vdd_core_sw ) ) ;

assign s_io_port_6 = 1'b0;

assign clkout = clkin ;

d04clgcgc01nd0e0 \clk_gate_sm_pecc_rdy_reg/latch (.clkout ( net339953 ) 
    , .clk ( pecc_clk_cts_3 ) , .en (  INST_INT[10:8]  ) , .te ( test_se ) , .vss ( vss ) 
    , .vcc ( vdd_bb_sw ) ) ;

d04clgbfn00wn0b5 route_opt4 (.o ( edt_scan_in[15] ) , .a ( n30 ) , .vss ( vss ) 
    , .vcc ( vdd_core_sw ) ) ;
d04clgbfn00wn0b5 route_opt3 (.o ( edt_scan_in[198] ) , .a ( n28 ) 
    , .vss ( vss ) , .vcc ( vdd_core_sw ) ) ;


cnvi_gnss_core_cnvi_gnss_core_edt_low_power_shift_decoder_1 decoder (
    .decoded_control ( bias_inputs ) , .vss ( vss ) , 
    .vdd_core_sw ( vdd_core_sw ) , 
    .encoded_control ( {n249 , low_power_hold_reg_6[8] , low_power_hold_reg_6[7] , 
	low_power_hold_reg_6[6] , low_power_hold_reg_6[5] , 
	low_power_hold_reg_6[4] , low_power_hold_reg_6[3] , 
	low_power_hold_reg_6[2] , n250 , n252 , low_power_hold_reg_5[9] , 
	n254 , low_power_hold_reg_5[7] , n255 , low_power_hold_reg_5[5] , 
	low_power_hold_reg_5[4] , n277 , n256 , low_power_hold_reg_5[1] , 
	low_power_hold_reg_5[0] , low_power_hold_reg_4[10] , n257 , n179 , 
	n196 , n213 , low_power_hold_reg_4[5] , low_power_hold_reg_4[4] , 
	low_power_hold_reg_4[3] , n218 , low_power_hold_reg_4[1] , n240 , 
	low_power_hold_reg_3[10] , low_power_hold_reg_3[9] , 
	low_power_hold_reg_3[8] , low_power_hold_reg_3[7] , 
	low_power_hold_reg_3[6] , n248 , low_power_hold_reg_3[4] , 
	low_power_hold_reg_3[3] , low_power_hold_reg_3[2] , 
	low_power_hold_reg_3[1] , low_power_hold_reg_3[0] , 
	low_power_hold_reg_2[10] , low_power_hold_reg_2[9] , n241 , 
	low_power_hold_reg_2[7] , n243 , low_power_hold_reg_2[5] , 
	low_power_hold_reg_2[4] , low_power_hold_reg_2[3] , n321 , 
	low_power_hold_reg_2[1] , low_power_hold_reg_2[0] , 
	low_power_hold_reg_1[10] , low_power_hold_reg_1[9] , 
	low_power_hold_reg_1[8] , low_power_hold_reg_1[7] , 
	low_power_hold_reg_1[6] , low_power_hold_reg_1[5] , n253 , 
	low_power_hold_reg_1[3] , low_power_hold_reg_1[2] , n311 , 
	low_power_hold_reg_1[0] , n244 , low_power_hold_reg_0[9] , 
	low_power_hold_reg_0[8] , low_power_hold_reg_0[7] , 
	low_power_hold_reg_0[6] , low_power_hold_reg_0[5] , n245 , n251 , 
	low_power_hold_reg_0[2] , n247 , low_power_hold_reg_0[0] } ) ) ;

endmodule


module a( a, b );

A inst_A ( 
  .a(a_net), .b(b_net)
);

endmodule

module b2b ( a, b );

A inst_A ( 
  .a(a_net), .b(b_net)
);

endmodule
