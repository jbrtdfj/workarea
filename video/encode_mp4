#!/usr/bin/perl

use strict;

use Getopt::Long;
use File::Find;
use Pod::Usage;

my ($ext, $deleteAction, $fileSuffix, $help, $man);

GetOptions ("extension"  => \$ext,
            "delete"     => \$deleteAction,
            "suffix=s"   => \$fileSuffix,
            'help|?' => \$help   )  or pod2usage(2);

GetOptions();
pod2usage(-exitval => 0, -verbose => 2) if $help;

my @dirs = @ARGV;

$ext ||= "avi";
$fileSuffix = "-$fileSuffix" if ($fileSuffix);

my @videoFiles;

foreach my $dir (@dirs) {
	die "directory $dir does not exists"   if (!-d $dir);

	find( sub {
		push(@videoFiles, $File::Find::name) if (/\.$ext$/);
		}, $dir);

}

if ($deleteAction) {
	generateDeleteScript(sort @videoFiles);
} else {
	generateConvertScript(sort @videoFiles);
}

#------------------------------------------------
# check if the equivalent mP4 files exist, if yes, add the rm command
#
sub generateDeleteScript {
	my (@files) = @_;

  my $count = 0;

	my $outScript = "convert_delete$fileSuffix.sh";
	open (SCRIPT, ">$outScript") || die "ERROR cannot open $outScript\n\n";

	print SCRIPT "#!/bin/sh\n";

	foreach my $v (@files) {
		my $mp4 = $v; $mp4 =~ s/\.$ext/.mp4/;

		if (-e $mp4) {
			print SCRIPT "rm \"$v\"\n" ;
			$count++;
			} else {
				print "[INFO] no mp4 for $v\n" ;				
			}
	}

	print "[INFO] $count files to delete\n";
	print "\n  execute : $outScript\n\n";
	close SCRIPT;

	chmod 0755, $outScript;
}

#------------------------------------------------
sub generateConvertScript {
	my (@files) = @_;

  my $count = 0;

	my $outScript = "convert$fileSuffix.sh";
	open (SCRIPT, ">$outScript") || die "ERROR cannot open $outScript\n\n";

	print SCRIPT "#!/bin/sh\n";

	foreach my $v (@files) {
		my $mp4 = $v; $mp4 =~ s/\.$ext/.mp4/;

		$count++;
		print SCRIPT "/Applications/HandBrakeCLI -i \"$v\" -o \"$mp4\" --preset Normal\n";
	}

	print "[INFO] $count files to convert\n";
	print "\n  execute : $outScript\n\n";
	close SCRIPT;

	chmod 0755, $outScript;
}

__END__
=head1 NAME 

encode_mp4 - convert movie into mp4 or remove already converted movies. 

=head1 SYNOPSIS

 encode_mp4 [options] <directory>

=head1 OPTIONS

=over 8

=item B<-help> 

Print a brief help message and exits.

=item B<-extension> <movie extension>

movie file etension to look for. default = avi

=item B<-delete>

write out a delete script (instead of conversion one)

=item B<-suffix> <script suffix>

suffix added to the generated scripts: convert-<extension>.sh and convert_delete-<extension>.sh 

=back

=head1 DESCRIPTION

This program will process recursively the given directory to find .avi files 
and generate scripts to either convert the movie into .mp4  (default) or 
remove movie file already converted into .mp4 if the option -delete is used 

B<Examples>

   encode_mp4 S01           => create convert.sh to convert .avi file of S01 into .mp4
   encode_mp4 S01 -delete   => create convert_delete.sh to remove .avi file of S01 already converted
=cut

